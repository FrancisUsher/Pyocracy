from D3Parser import parse_effects_from_row



class Policy:
    """

    Attributes:
        name (str): Internal unique identifier.
        guiname (str): How it should be called in-game.
        slider: From the docs, "if set to 'default' then the slider for this
            policy has no specific features. If set to a name, this name is
            used inside 'sliders.csv'".
        description (str): How it should be described in-game.
        flags: blank, MULTIPLYINCOME, or UNCANCELLABLE
            From the docs, "UNCANCELLABLE means the cancel button is greyed
            out and the policy is always implemented at 0.5 strength unless
            specified at a different level. MULTIPLYINCOME means that when
            determining the amount of income generated by the policy, the
            various inputs to the income get multipleid rather than added
            (see below)."
        introduce: Political capital cost to introduce.
        cancel: Political capital cost to cancel.
        raise: Political capital cost to raise funding/support.
        lower: Political capital cost to lower funding/support.
        department: Which policy category this falls under.
            We might want to extend this to more general policy tags so
            users can organize the screen in custom views, not just the
            7 default departments.
        mincost: Cost to fund policy at minimum (slider fully to the left).
        maxcost: Cost to fund policy at maximum (slider fully to the right).
        cost multiplier: From the docs, "A series of inputs, separated by
            [semi-]colons, which determine how we get a 'cost multiplier'
            for the policy, which is a value by which the final cost of
            the policy is multiplied. Each entry in the list is either
            _default_ and a set value or it's an actual effect"
            (an inward facing, cost effect, rather than outward)
        implementation: how many in-game turns the policy takes to change.
            From the docs, "This will be adjusted in practice for the
            competence of the minister in charge of this policy."
        minincome: base policy income with slider all the way to the left.
        maxincome: base policy income with slider all the way to the right.
        incomemultiplier: From docs, "Exactly the same as Cost Multiplier,
            except the flag MULTIPLYINCOME under flags can convert this to be a
            value where the inputs are multiplied together rather than added.
        effects (list): Formulas for how this policy affects the game situation.
    """
    def __init__(self, row, heads):
        """Populate the policy object based on a row of the game Policies CSV.
        Keyword arguments:
            row: Sequence of values from a game Policies CSV row.
            heads: Names for each value in a prefix of the row.
        """
        self.__dict__.update({h:v for (h,v) in zip(heads, row)})
        self.effects = parse_effects_from_row(row)

    def has_effect(self, search_effects):
        """Check if the policy affects any of the search_effect tagets."""
        return any(any(term in e.target for e in self.effects)
                   for term in search_effects)


